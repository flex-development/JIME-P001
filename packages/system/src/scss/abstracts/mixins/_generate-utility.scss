/// ----------------------------------------------------------------------------
/// @name generate-utility
/// @group mixins
/// ----------------------------------------------------------------------------

/// Utility class generator.
/// @access private
/// @require {variable} $enable-important-utils
/// @param {Map} $util - Utility map
/// @param {String} $infix - Breakpoint infix, or empty string
@mixin generate-utility($util, $infix) {
  // Get values to generate utility classes
  $values: map-get($util, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
    $values: zip($values, $values);
  }

  // Use options (utility values) to build class
  @each $key, $value in $values {
    // Get CSS property
    $props: map-get($util, property);

    // Multiple properties are possible (ex: horizontal/vertical padding)
    @if type-of($props) == 'string' {
      $props: append((), $props);
    }

    // Use custom class if defined
    $custom-class: map-get($util, class);
    $class: if($custom-class, $custom-class, nth($props, 1));
    $class: if($class == null, '', $class);

    // Use state property to generate pseudo-classes
    $state: if(map-has-key($util, state), map-get($util, state), ());

    // Don't prefix if value key is null (ex: shadow classes)
    $mod: if($key, if($class == '' and $infix == '', '', '-') + '#{$key}', '');

    @if $value != null {
      $value: if($enable-important-utils, $value !important, $value);

      .#{$infix}#{$class}#{$mod} {
        @each $prop in $props {
          #{$prop}: $value;
        }
      }

      @each $pseudo in $state {
        .#{$infix}#{$pseudo}\:#{$class}#{$mod}\:#{$pseudo} {
          @each $prop in $props {
            #{$prop}: $value;
          }
        }
      }
    }
  }
}
