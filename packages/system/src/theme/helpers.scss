// -----------------------------------------------------------------------------
// Helper Classes
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Backgrounds
// -----------------------------------------------------------------------------

.bg {
  @each $key, $color in $theme-colors {
    &-#{$key} {
      @if $key == 'white' {
        color: $dark;
      } @else if $key == 'accent' or $key == 'yellow' {
        color: $black !important;
      } @else {
        color: $white !important;
      }
    }

    &-outline-#{$key} {
      @include outline($color);

      color: $color;
    }
  }
}

// -----------------------------------------------------------------------------
// Borders & Outlines
// -----------------------------------------------------------------------------

@each $class in (border, outline) {
  @each $key, $color in $theme-colors {
    .#{$class}-#{$key} {
      #{$class}-color: $color !important;
    }
  }
}

// -----------------------------------------------------------------------------
// Elements
// -----------------------------------------------------------------------------

@each $class in (icon, link, text) {
  @each $key, $size in $font-sizes {
    .#{$class}-#{$key} > * {
      font-size: inherit;
    }
  }
}

// -----------------------------------------------------------------------------
// Events
// -----------------------------------------------------------------------------

@each $event in (active, hover, focus, focus-within, visited) {
  @each $key, $color in $theme-colors {
    .#{$event}\:bg-#{$key}:#{$event} {
      background-color: $color !important;

      @if $key == 'white' {
        color: $dark;
      } @else if $key == 'accent' or $key == 'yellow' {
        color: $black !important;
      } @else {
        color: $white !important;
      }
    }

    @each $type in (heading, icon, link, text) {
      .#{$event}\:#{$type}-#{$key}:#{$event} {
        color: $color !important;
      }
    }
  }
}

// -----------------------------------------------------------------------------
// Flexbox
// -----------------------------------------------------------------------------

.flex {
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      &#{$infix}-center {
        @include flex-center;
      }
    }
  }

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      &#{$infix}-spread {
        @include flex-spread;
      }
    }
  }
}

// -----------------------------------------------------------------------------
// Spacing
// -----------------------------------------------------------------------------

@each $pos in (first, last) {
  @each $abbr, $value in (m: margin, p: padding) {
    @each $direction, $dir in (b: bottom, l: left, r: right, t: top) {
      @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
          $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

          .#{$abbr}#{$direction}-0 {
            &-#{$pos}#{$infix} > *:#{$pos}-child {
              #{$value}-#{$dir}: map-get($spacers, 0) !important;
            }
          }
        }
      }
    }
  }
}

@each $abbr, $dimension in (h: height, w: width) {
  @each $key, $space in $spacers {
    .#{$abbr}-spacer {
      &-#{$key} {
        @include element-size($space, $dimension, $space, $space);
      }

      @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
          $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

          &#{$infix}-#{$key} {
            @include element-size($space, $dimension, $space, $space);
          }
        }
      }
    }
  }
}
